import numpy as np
from pylab import *


#----------- Définition de la fonction Runge Kutta --------------#

# dX_dt : Fonction à intégrer
# X0 : Conditions initiales
# t : Pas de temps
# N : Nombre d'itérations

def RungeKutta(r, t, N) :
    
    k1 = h * dX_dt( r , t )
    k2 = h * dX_dt( r + 0.5*k1 , t + 0.5*N )
    k3 = h * dX_dt( r + 0.5*k2 , t + 0.5*N )
    k4 = h * dX_dt( r + k3 , t + N )
    
    return (k1+2*k2+2*k3+k4)/6

#----------------- Définition de la fonction --------------------#

def dX_dt(r, t):
    
    a = 1.0
    b = 0.1
    c = 1.5
    d = 0.75
    
    X, Y = r[0],r[1]
    
    dx_dt = a*X -   b*X*Y
    dy_dt = -c*Y + d*b*X*Y
    
    return np.array([dx_dt , dy_dt], float)

#------------------ Définition de la boucle ---------------------#

h = 0.001
tpoints = np.arange(0, 30, h)
xpoints = []
ypoints = []
r = np.array([2,2], float)

for t in tpoints:
    xpoints.append(r[0])
    ypoints.append(r[1])
    r += RungeKutta(r, t, h)

f1 = plt.figure()
plt.plot(tpoints, xpoints)
plt.plot(tpoints, ypoints)

f2 = plt.figure()
plt.plot(xpoints, ypoints)

plt.show()
